<!doctype html>
<html lang="pt-br">
<head>
	<title>Como programar um jogo utilizando o celular</title>
	<meta name="description" content="Tutorial que mostra como fazer um game programando pelo celular." />
	<link rel="canonical" href="https://rodrigoschio.github.io/tutoriais/modulos/15/index.htm" />
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />
	<link rel="icon" href="../../imagens/favicon.ico" />
	<link href="../../css/styles.css" rel="stylesheet" />
	<link href="../../css/prism.css" rel="stylesheet" />
</head>

<body>
	<h1><a href="../../index.htm"><span>Tutoriais</span></a></h1>
	<main>

<article>
<h2>Programando com o celular</h2>
Esse tutorial mostra como desenvolver um joguinho de celular sem usar nenhum computador.<br>
Não é tão simples assim, como você já deve imaginar.
</article>

<article>
<h2>AIDE</h2>
O primeiro passo é instalar o app AIDE.<br>
Esse app compila e gera arquivos apk<br>
O AIDE não está mais disponível na play store, mas deve ser possível encontrá-lo no site apkpure
</article>

<article>
<h2>Novo projeto</h2>
Depois de instalar, use o AIDE para criar um novo projeto.<br>
Do tipo "new android app (gradle xml)"<br>
O nome do projeto deve ser HarryLeap e o "package name" deve ser harry.leap<br><br>

O AIDE gera os códigos do helloworld e exibe na tela o arquivo main.xml e o arquivo MainActivity.java<br>
Para fechar (sem alterar nada) clique sobre o nome do arquivo que está sendo exibido na tela e clique em close.<br>
O botao azul no canto de baixo é bem útil e importante.
</article>

<article>
<h2>Gerando um apk</h2>
Encontre o arquivo MainActivity.java e adicione<br>
<pre><code class="language-java">import android.view.View;</code></pre>
após os outros imports.<br><br>

Substitua a linha
<pre><code class="language-java">setContentView(R.layout.main);</code></pre>
por
<pre><code class="language-java">setContentView(new View(this));</code></pre>

Se você fez tudo certo até aqui, é possível gerar um app.<br>
Clique no triângulo no canto superior direito da tela.<br>
Siga as instruções que aparecem na tela até concluir a instalação.<br>
Depois clique em abrir.
</article>

<article>
<h2>Outro ícone</h2>
A gente vai gerar um outro ícone do app.<br>
Para isso instale o app "pixel station" (deve estar disponível na play store).<br>
Se não estiver procure e instale algum outro editor de pixel art.<br><br>
O harry pode ser composto de 4 retas (palitos) e um ponto (circulo).<br><br>

<img src="imagens/harry1.png" class=imagem onclick="window.open(this.src,'_blank');" style='width:44px; height:44px;'>
<img src="imagens/harry2.png" class=imagem onclick="window.open(this.src,'_blank');" style='width:44px; height:44px;'>
<img src="imagens/harry3.png" class=imagem onclick="window.open(this.src,'_blank');" style='width:44px; height:44px;'>
<img src="imagens/harry4.png" class=imagem onclick="window.open(this.src,'_blank');" style='width:44px; height:44px;'>
<img src="imagens/harry5.png" class=imagem onclick="window.open(this.src,'_blank');" style='width:44px; height:44px;'><br><br>

Salve como harry e coloque o arquivo harry.png na pasta <b>app/src/main/res/drawable</b><br>
(crie a pasta drawable se ela não existir)!<br><br>

Vamos editar o arquivo AndroidManifest.xml para setar a imagem como ícone do app.<br><br>

Onde está:
<pre><code class="language-markup">android:icon="@drawable/ic_launcher"</code></pre>
Altere apara;
<pre><code class="language-markup">android:icon="@drawable/harry"</code></pre>
</article>

<article>
<h2>AndroidManifest</h2>
Vamos editar mais o arquivo AndroidManifest<br>
Ele é como um 'arquivo de configuração'.<br>
Ele não contém código java, mas é importante.<br><br>

Em dois lugares nesse arquivo<br>
substitua:
<pre><code class="language-markup">"@string/app_name"</code></pre>
por:
<pre><code class="language-markup">"harry leap"</code></pre><br>

Onde está:
<pre><code class="language-markup">"@style/AppTheme"</code></pre>
Substitua por:
<pre><code class="language-markup">"@android:style/Theme.Light.NoTitleBar"</code></pre><br>

E inclua a linha:
<pre><code class="language-markup">android:screenOrientation="landscape"</code></pre>
entre
<pre><code class="language-markup">&lt;activity</code></pre>
e
<pre><code class="language-markup">android:label</code></pre><br>
(isso serve para configurar que nosso app será modo paisagem)<br><br>

O arquivo fica assim:
<pre><code class="language-markup">&lt;?xml version="1.0" encoding="utf-8"?>
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="harry.leap" >

	&lt;application
		android:allowBackup="true"
		android:icon="@drawable/harry"
		android:label="harry leap"
		android:theme="@android:style/Theme.Light.NoTitleBar"
		android:resizeableActivity = "true">
		&lt;activity
			android:screenOrientation="landscape"
			android:name=".MainActivity"
			android:label="harry leap">
				&lt;intent-filter>
					&lt;action android:name="android.intent.action.MAIN" />

					&lt;category android:name="android.intent.category.LAUNCHER" />
				&lt;/intent-filter>
		&lt;/activity>
	&lt;/application>

&lt;/manifest></code></pre><br><br>

Se você instalar com essas modificações, você percebe algumas diferenças.
</article>

<article>
<h2>Excluir arquivos desnecessários</h2>
Agora, antes de começarmos a escrever código java, vamos excluir uns arquivos desnecessários.<br>
Delete TODAS as pastas que estão dentro da pasta app/src/main/res/<br>
Deixe <b>APENAS</b> a pasta drawable.
</article>

<article>
<h2>Código java</h2>
Vamos começar a lidar com código java.<br>
Abra o arquivo MainActivity.java e substitua os import com asterisco por:
<pre><code class="language-java">import android.app.Activity;
import android.os.Bundle;</code></pre><br>

A gente vai escrever o código do jogo.<br>
Código java.<br>
O código vai dentro de uma classe chamada HarryLeap<br>
Essa classe "extende" a classe "View"<br><br>

Para comecarmos, o código fica assim:
<pre><code class="language-java">package harry.leap;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.content.Context;

public class MainActivity extends Activity {
	@Override protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(new HarryLeap(this));
	}
}

class HarryLeap extends View {
	public HarryLeap(Context c) {
		super(c);
	}
}</code></pre>
</article>

<article>
<h2>Exibindo na tela</h2>
É possivel exibir formas na tela.<br>
Programando o método onDraw.

<pre><code class="language-java">@Override protected void onDraw(Canvas canvas) {
	super.onDraw(canvas);
		Paint p=new Paint();
		canvas.drawRect(50,200,400,600,p);
	}</code></pre>

Na chamada da função drawRect<br>
os números são coordenadas.<br>
Coordenadas do retângulo desenhado na tela.<br><br>

Para colocar uma imagem png na tela usa-se o comando drawBitmap.<br>
É preciso adicionar os imports:
<pre><code class="language-java">import android.graphics.Bitmap;
import android.graphics.BitmapFactory;</code></pre>

É preciso carregar o png dentro de uma variável do tipo bitmap.

<pre><code class="language-java">@Override protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		super.onSizeChanged(w, h, oldw, oldh);
		harry=Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),R.drawable.harry), 64, 64, true); 
	}</code></pre>

O código até aqui fica assim:

<pre><code class="language-java">package harry.leap;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

public class MainActivity extends Activity {
	@Override protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(new HarryLeap(this));
	}
}

class HarryLeap extends View {
	Bitmap harry;
	public HarryLeap(Context c) {
		super(c);
	}
	@Override protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		Paint p=new Paint();
		canvas.drawRect(50,200,400,600,p);
		canvas.drawBitmap(harry,500,300,p);
	}
	@Override protected void onSizeChanged(int width, int height, int oldw, int oldh) {
		super.onSizeChanged(width, height, oldw, oldh);
		harry=Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),R.drawable.harry), 64, 64, true); 
	}
}</code></pre>

Mas aí tem um problema:<br>
O tamanho da tela e o grau de zoom!!!<br><br>

Em alguns celulares o código acima exibe o harry grande, na parte de baixo da tela.<br>
Em outros celulares o harry aparece pequenininho no alto da tela...<br><br>

A gente quer que fique igual para todos usuarios em qualquer celular.<br>
O problema é que alguns usuários definem zoom no celular.<br><br>

Para resolver essa questão dá para usar proporção.<br>
E deixar a tela igual em todo celular!<br><br>

Para isso é preciso as variáveis screenWidth,screenHeight e fractionScreenSize<br>

<pre><code class="language-java">float screenWidth,screenHeight,fractionScreenSize;
	@Override protected void onSizeChanged(int width, int height, int oldw, int oldh) {
		super.onSizeChanged(width, height, oldw, oldh);
		screenWidth=width;
		screenHeight=height;
		fractionScreenSize=width/500;
		harry=Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),R.drawable.harry), (int)(fractionScreenSize*64), (int)(fractionScreenSize*64), true);
	}</code></pre>

Vamos desenhar um chão e um céu:

<pre><code class="language-java">package harry.leap;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;

public class MainActivity extends Activity {
	@Override protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(new HarryLeap(this));
	}
}

class HarryLeap extends View {
	Bitmap harry;
	float screenWidth,screenHeight,fractionScreenSize;
	public HarryLeap(Context c) {
		super(c);
	}
	@Override protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		Paint p=new Paint();
		p.setColor(Color.rgb(222,222,222));
		canvas.drawRect(0,0,screenWidth,(float)(screenHeight*.7),p);
		p.setColor(Color.rgb(144,144,144));
		canvas.drawRect(0,(float)(screenHeight*.7),screenWidth,screenHeight,p);
		canvas.drawBitmap(harry,(float)(screenWidth*.1),(float)(screenHeight*.5),p);
	}
	@Override protected void onSizeChanged(int width, int height, int oldw, int oldh) {
		super.onSizeChanged(width, height, oldw, oldh);
		screenWidth=width;
		screenHeight=height;
		fractionScreenSize=width/500;
		harry=Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),R.drawable.harry), (int)(fractionScreenSize*64), (int)(fractionScreenSize*64), true); 
	}
}</code></pre>
</article>

<article>
<h2>onTouch</h2>
Agora vamos comecar a programar o que acontece quando o user toca a tela:<br><br>

Criar uma variável chamada "alturaPulo"
<pre><code class="language-java">class HarryLeap extends View {
	Bitmap harry;
	int alturaPulo;
	float screenWidth,screenHeight,fractionScreenSize;
	public HarryLeap(Context c) {
		super(c);
	}</code></pre>

Importar a biblioteca "MotionEvent":

<pre><code class="language-java">import android.view.MotionEvent;</code></pre>

Tratar o toque do usuário:
<pre><code class="language-java">	@Override public boolean onTouchEvent(MotionEvent event) {
		if(event.getAction()==MotionEvent.ACTION_DOWN)
			if(alturaPulo==0)alturaPulo=100;
			else alturaPulo=0;
		invalidate();
		return super.onTouchEvent(event);
	}</code></pre>

A chamada à função <b>invalidate()</b> é a chamada à função <b>onDraw</b>.
</article>

<article>
<h2>Timer e TimerTask</h2>
Vamos então usar "Timer" e "TimerTask" para fazer um obstáculo se mover em direção ao harry:

<pre><code class="language-java">package harry.leap;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.view.MotionEvent;
import java.util.TimerTask;
import java.util.Timer;

public class MainActivity extends Activity {
	@Override protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(new HarryLeap(this));
	}
}

class HarryLeap extends View {
	Bitmap harry;
	int alturaPulo,obstaculo1,obstaculo2,obstaculo3;
	float screenWidth,screenHeight,fractionScreenSize;
	TimerTask gameLoop=new TimerTask() { 
		public void run() {
			obstaculo1-=3;
			obstaculo2-=4;
			obstaculo3-=5;
			if(obstaculo1&lt;-30)obstaculo1=480;
			if(obstaculo2&lt;-30)obstaculo2=530;
			if(obstaculo3&lt;-30)obstaculo3=580;
			invalidate();
		}
	};
	public HarryLeap(Context c) {
		super(c);
	}
	@Override protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		Paint p=new Paint();
		p.setColor(Color.rgb(222,222,222));
		canvas.drawRect(0,0,screenWidth,(float)(screenHeight*.7),p);
		p.setColor(Color.rgb(144,144,144));
		canvas.drawRect(0,(float)(screenHeight*.7),screenWidth,screenHeight,p);
		canvas.drawBitmap(harry,(float)(screenWidth*.1),(float)(screenHeight*.5)-(int)(alturaPulo*fractionScreenSize),p);
		p.setColor(Color.rgb(44,44,44));
		canvas.drawCircle(obstaculo1*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
		canvas.drawCircle(obstaculo2*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
		canvas.drawCircle(obstaculo3*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
	}
	@Override protected void onSizeChanged(int width, int height, int oldw, int oldh) {
		super.onSizeChanged(width, height, oldw, oldh);
		screenWidth=width;
		screenHeight=height;
		fractionScreenSize=width/500;
		harry=Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),R.drawable.harry), (int)(fractionScreenSize*64), (int)(fractionScreenSize*64), true);
		new Timer().schedule(gameLoop,0,36);
	}
	@Override public boolean onTouchEvent(MotionEvent event) {
		if(event.getAction()==MotionEvent.ACTION_DOWN)
			if(alturaPulo==0)alturaPulo=100;
			else alturaPulo=0;
		invalidate();
		return super.onTouchEvent(event);
	}
}</code></pre>
</article>

<article>
<h2>Fazendo o harry pular</h2>
Monitorando a variável alturaPulo a gente faz a animação do pulo do harry:

<pre><code class="language-java">class HarryLeap extends View {
	Bitmap harry;
	int alturaPulo,obstaculo1,obstaculo2,obstaculo3;
	float screenWidth,screenHeight,fractionScreenSize;
	TimerTask gameLoop=new TimerTask() { 
		public void run() {
			if(alturaPulo%4==1)alturaPulo+=4;
			if(alturaPulo%4==3)alturaPulo-=4;
			if(alturaPulo>40)alturaPulo=39;
			if(alturaPulo&lt;4)alturaPulo=0;
			obstaculo1-=3;
			obstaculo2-=4;
			obstaculo3-=5;
			if(obstaculo1&lt;-30)obstaculo1=480;
			if(obstaculo2&lt;-30)obstaculo2=530;
			if(obstaculo3&lt;-30)obstaculo3=580;
			invalidate();
		}
	};
	public HarryLeap(Context c) {
		super(c);
	}
	@Override protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		Paint p=new Paint();
		p.setColor(Color.rgb(222,222,222));
		canvas.drawRect(0,0,screenWidth,(float)(screenHeight*.7),p);
		p.setColor(Color.rgb(144,144,144));
		canvas.drawRect(0,(float)(screenHeight*.7),screenWidth,screenHeight,p);
		canvas.drawBitmap(harry,(float)(screenWidth*.1),(float)(screenHeight*.5)-(int)(alturaPulo*fractionScreenSize*3),p);
		p.setColor(Color.rgb(44,44,44));
		canvas.drawCircle(obstaculo1*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
		canvas.drawCircle(obstaculo2*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
		canvas.drawCircle(obstaculo3*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
	}
	@Override protected void onSizeChanged(int width, int height, int oldw, int oldh) {
		super.onSizeChanged(width, height, oldw, oldh);
		screenWidth=width;
		screenHeight=height;
		fractionScreenSize=width/500;
		harry=Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),R.drawable.harry), (int)(fractionScreenSize*64), (int)(fractionScreenSize*64), true);
		new Timer().schedule(gameLoop,0,36);
	}
	@Override public boolean onTouchEvent(MotionEvent event) {
		if(event.getAction()==MotionEvent.ACTION_DOWN)
			if(alturaPulo==0)alturaPulo=5;
			//else alturaPulo=0;
		invalidate();
		return super.onTouchEvent(event);
	}
}</code></pre>
</article>

<article>
<h2>Código completo</h2>
O Código completo tratando a colisão entre harry e os obstáculos fica assim:

<pre><code class="language-java">package harry.leap;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.view.MotionEvent;
import java.util.TimerTask;
import java.util.Timer;

public class MainActivity extends Activity {
	@Override protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(new HarryLeap(this));
	}
}

class HarryLeap extends View {
	Bitmap harry;
	int alturaPulo,obstaculo1,obstaculo2,obstaculo3;
	float screenWidth,screenHeight,fractionScreenSize;
	void init() {
		obstaculo1=700;
		obstaculo2=710;
		obstaculo3=720;
	}
	TimerTask gameLoop=new TimerTask() { 
		public void run() {
			if(alturaPulo%4==1)alturaPulo+=4;
			if(alturaPulo%4==3)alturaPulo-=4;
			if(alturaPulo>40)alturaPulo=39;
			if(alturaPulo&lt;4)alturaPulo=0;
			obstaculo1-=3;
			obstaculo2-=4;
			obstaculo3-=5;
			if(obstaculo1&lt;-30)obstaculo1=480;
			if(obstaculo2&lt;-30)obstaculo2=530;
			if(obstaculo3&lt;-30)obstaculo3=580;
			if(alturaPulo&lt;10&&obstaculo1&lt;46&&obstaculo1>38)init();
			if(alturaPulo&lt;10&&obstaculo2&lt;46&&obstaculo2>38)init();
			if(alturaPulo&lt;10&&obstaculo3&lt;46&&obstaculo3>38)init();
			invalidate();
		}
	};
	public HarryLeap(Context c) {
		super(c);
	}
	@Override protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		Paint p=new Paint();
		p.setColor(Color.rgb(222,222,222));
		canvas.drawRect(0,0,screenWidth,(float)(screenHeight*.7),p);
		p.setColor(Color.rgb(144,144,144));
		canvas.drawRect(0,(float)(screenHeight*.7),screenWidth,screenHeight,p);
		canvas.drawBitmap(harry,(float)(screenWidth*.1),(float)(screenHeight*.5)-(int)(alturaPulo*fractionScreenSize*3),p);
		p.setColor(Color.rgb(44,44,44));
		canvas.drawCircle(obstaculo1*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
		canvas.drawCircle(obstaculo2*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
		canvas.drawCircle(obstaculo3*fractionScreenSize*2,(float)(screenHeight*.62),36,p);
	}
	@Override protected void onSizeChanged(int width, int height, int oldw, int oldh) {
		super.onSizeChanged(width, height, oldw, oldh);
		screenWidth=width;
		screenHeight=height;
		fractionScreenSize=width/500;
		harry=Bitmap.createScaledBitmap(BitmapFactory.decodeResource(getResources(),R.drawable.harry), (int)(fractionScreenSize*64), (int)(fractionScreenSize*64), true);
		init();
		new Timer().schedule(gameLoop,0,36);
	}
	@Override public boolean onTouchEvent(MotionEvent event) {
		if(alturaPulo==0)altura=5;
		return super.onTouchEvent(event);
	}
}</code></pre>
</article>

<article>
<h2>Compartilhar o joguinho</h2>
Para compartilhar o jogo dá pra usar o app apkExtractor (que está disponível na play store)
</article>

<article>
<h2>Arquivos do Projeto</h2>
Código fonte do projeto <a href=harryleap.zip>Harry leap</a>.
</article>

	<div id="coment"><div id="disqus_thread"></div></div>
	</main>
	<footer>
		<button onclick="location.href = '../../index.htm';">home</button>
		<button onclick="exibe();">seções</button>
		<button onclick="(document.head || document.body).appendChild(s);">comente</button>
	</footer>

	<script src="../../js/script.js"></script>
	<script src="../../js/prism.js"></script>
</body>
</html>
